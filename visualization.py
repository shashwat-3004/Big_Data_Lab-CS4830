# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKaorWQICvZKWL-M_ZbQwbZefXq2ki8a
"""

from pyspark.context import SparkContext
from pyspark.ml.linalg import Vectors
from pyspark.sql.session import SparkSession
from pyspark.sql.types import *
from pyspark.ml import Pipeline
import pyspark.sql
import pyspark.sql.functions
import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
from pyspark.sql.functions import *

spark.stop()

spark = SparkSession.builder.appName('yelp').config("spark.driver.memory", "2g").config("spark.executor.memory","4g").getOrCreate()

data_schema = StructType([StructField('id_1', StringType(), True),
               StructField('cfu_1', FloatType(), True),
               StructField('date', StringType(), True),
               StructField('cfu_2', FloatType(), True),
               StructField('id_2', StringType(), True),
               StructField('stars', FloatType(), True),
               StructField('text', StringType(), True),
               StructField('cfu_3', FloatType(), True),
               StructField('id_3', StringType(), True)])

yelp_dataset = spark.read.format("csv").schema(data_schema)\
.option("mode", "DROPMALFORMED")\
.option("quote", '"')\
.option("multiline", "true")\
.option("escape", "\"")\
.load("gs://shapap2/YELP_train.csv/")

print('The original yelp dataset has ' + str(yelp_dataset.count()) + ' rows.')

yelp_dataset=yelp_dataset.filter((yelp_dataset.stars>0)&(yelp_dataset.stars<=5))
yelp_dataset = yelp_dataset.filter("stars is NOT NULL AND text is NOT NULL") 
print('the final Yelp dataset has ' + str(yelp_dataset.count()) + ' rows.')

yelp_dataset.limit(10).toPandas().head(5)

print('Processed dataset summary')
yelp_dataset.select(['cfu_1', 'cfu_2', 'cfu_3', 'stars']).describe().show()

from numpy import log10
def barplotfunc(col_x, data, c, log = False):
    df = data.groupBy(col_x).count()
    df = df.toPandas()
    plt.figure(figsize = (10, 8))

    if log == True:
        # log10 count for columns which have a large imbalance in count values
        plt.title('Bar plot of log10 ' + col_x + ' counts in the processed yelp dataset')
        plt.bar(df[col_x], log10(df['count']), color = c)
        plt.xlabel(col_x)
        plt.ylabel('log10(count)')
        plt.xlim([0,500])
        plt.show()
        
    else:
        plt.title('Bar plot of the ' + col_x + ' count in the processed yelp dataset')
        plt.bar(df[col_x], df['count'], color = c)
        plt.xlabel(col_x)
        plt.ylabel('count')
        plt.show()

barplotfunc('stars', yelp_dataset, c = 'r')

barplotfunc('cfu_1', yelp_dataset, c = 'g', log = True)

barplotfunc('cfu_2', yelp_dataset, c = 'b', log = True)

barplotfunc('cfu_3', yelp_dataset, c = 'orange', log = True)